import asyncio
import logging
import random

from configs import config
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command, CommandObject
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hide_link
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from typing import Optional
from aiogram.filters.callback_data import CallbackData


logging.basicConfig(level=logging.INFO)
anims = ['CgACAgQAAxkBAAIBGmWQMZuI4A3ZRC4dl7N76a5Z8AYYAAIkAwACBhcEU_zzWc930Hi_NAQ',
         'CgACAgQAAxkBAAIBG2WQMZsG_Be6X1VdBpXtawiz6yluAAI-AwACd1kFUzZ_JAi7KSw3NAQ',
         'CgACAgQAAxkBAAIBHGWQMZ4EicY5eZvwWHL-7FfkYvhpAAJDAwACgLoFUwJdqgTO1ShQNAQ',
         'CgACAgIAAxkBAAIBHmWQMaAKxpad-byyLf8JT01R7QyrAAKpGAACUFQBScrfAAEC2M66KDQE']
stickers = [
            'CAACAgIAAxkBAAICW2WRXat3Shp3fvBzXhOSyqeTEXJ3AAILAAMlUKUZJ0I9amwv-1A0BA',
            'CAACAgIAAxkBAAICXWWRXawrtzCMCXqiU424Cs0AAbUkqAACBgADJVClGXvbdXDWg3gQNAQ',
            'CAACAgIAAxkBAAICX2WRXa574pyEut2FqIIWcGD2J-mIAAIVAAMlUKUZf-Mqb9sL4_s0BA',
            'CAACAgIAAxkBAAICYWWRXbFx2rjntcRyOy-K839e1CA6AAJRAAMlUKUZmeS50x0o3fs0BA',
            'CAACAgIAAxkBAAICY2WRXbND7vV-7lNKdRU02vfULmFjAAJoAAMlUKUZKElkah7EMdQ0BA',
            'CAACAgIAAxkBAAICZWWRXbX-lngnQ8CWCreZcha19Jf5AAJ5AAMlUKUZInGTvhbMRgU0BA',
            'CAACAgIAAxkBAAICZ2WRXbYzPYwwSZt6Wn5kuB2TCyTIAAJ1AAMlUKUZcm9by53wzDw0BA',
            'CAACAgIAAxkBAAICaWWRXbjwz-jn0QRvCwyMKHPv7D7JAAKLAAMlUKUZxPevk94tTNU0BA',
            'CAACAgIAAxkBAAICa2WRXbm5BOKSVmcOsURojzdOVpf1AAKgAAMlUKUZcetTAdja41g0BA',
            'CAACAgIAAxkBAAICbWWRXboyXhMO49zCJVIzaYmMs5yTAAKWAAMlUKUZHwTRPdbgNLA0BA',
    ]
bets = {}

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.bot_token.get_secret_value(), parse_mode='MARKDOWNV2')
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


def get_keyboard_main_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text='üëãüèø–°–∞–ª–∞–ºüëãüèø'),
        types.KeyboardButton(text='üé∞–†—É–ª–µ—Ç–∫–∞üé∞')
    )
    builder.row(
        types.KeyboardButton(text='ü§ë–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–±–∫–∏ü§ë'),
        types.KeyboardButton(text='ü§°–ö—Ä—É—Ç—ã–µ —Å—Ç–∏–∫–∏ü§°')
    )
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def get_keyboard_bet():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûñ10", callback_data=BetCallbackData(action='change', bet_cng=-10))
    builder.button(text="‚ûñ50", callback_data=BetCallbackData(action='change', bet_cng=-50))
    builder.button(text="‚ûñ250", callback_data=BetCallbackData(action='change', bet_cng=-250))
    builder.button(text="‚ûñ1000", callback_data=BetCallbackData(action='change', bet_cng=-1000))
    builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data=BetCallbackData(action='finish'))
    builder.button(text="‚ûï10", callback_data=BetCallbackData(action='change', bet_cng=10))
    builder.button(text="‚ûï50", callback_data=BetCallbackData(action='change', bet_cng=50))
    builder.button(text="‚ûï250", callback_data=BetCallbackData(action='change', bet_cng=250))
    builder.button(text="‚ûï1000", callback_data=BetCallbackData(action='change', bet_cng=1000))
    builder.adjust(4, 1, 4)
    return builder.as_markup()


def get_keyboard_guess_number():
    builder = InlineKeyboardBuilder()
    builder.button(text='1', callback_data=NumCallbackData(num=1))
    builder.button(text='2', callback_data=NumCallbackData(num=2))
    builder.button(text='3', callback_data=NumCallbackData(num=3))
    builder.button(text='4', callback_data=NumCallbackData(num=4))
    builder.button(text='5', callback_data=NumCallbackData(num=5))
    builder.button(text='6', callback_data=NumCallbackData(num=6))
    builder.adjust(2)
    return builder.as_markup()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    print(message)
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–∏–∫, –≤–≤–µ–¥–∏ *\/menu* –∏ –Ω–∞—á–∏–Ω–∞–π ~–≤—Å–∞—Å—ã–≤–∞—Ç—å –±–∞–±–∫–∏~ –∏–≥—Ä–∞—Ç—å')


@dp.message(Command('menu'))
async def cmd_menu(message: Message):
    await message.answer('–í—ã–±–∏—Ä–∞–π, –ø—É—Ç–Ω–∏–∫',
                         reply_markup=get_keyboard_main_menu())


@dp.message(F.text.lower() == 'üëãüèø—Å–∞–ª–∞–ºüëãüèø')
async def salam_f(message: Message):
    await message.answer(
        '*Salam, bradok*'
    )


class BetCallbackData(CallbackData, prefix='bet'):
    action: str
    bet_cng: Optional[int] = None


class NumCallbackData(CallbackData, prefix='num'):
    num: int


@dp.message(F.text.lower() == 'ü§ë–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–±–∫–∏ü§ë')
async def pls_babos(message: Message, balance: list[int]):
    balance[0] += 100
    await message.answer('–û–∫, \+100 –∫ –±–∞–ª–∏–∫—É')


@dp.message(F.text.lower() == 'ü§°–∫—Ä—É—Ç—ã–µ —Å—Ç–∏–∫–∏ü§°')
async def prikol_sticks(message: Message, stickers: list[str]):
    await message.answer_sticker(random.Random().choice(stickers))


async def update_bet_text(message: types.Message, new_value: int):
    await message.edit_text(
        f"–°—Ç–∞–≤–∫–∞: {new_value}",
        reply_markup=get_keyboard_bet()
    )


@dp.message(F.text.lower() == 'üé∞—Ä—É–ª–µ—Ç–∫–∞üé∞')
async def roulette(message: types.Message):
    bets[message.from_user.id] = bets.get(message.from_user.id, 0)
    await message.answer('üíé*–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É*üíé')
    await message.answer(f"–°—Ç–∞–≤–∫–∞: {bets[message.from_user.id]}", reply_markup=get_keyboard_bet())


@dp.callback_query(BetCallbackData.filter(F.action == 'change'))
async def callback_change_bet(callback: types.CallbackQuery, callback_data: BetCallbackData):
    user_value = bets.get(callback.from_user.id, 0)
    if user_value + callback_data.bet_cng < 0:
        await callback.message.answer('‚ùå*–û—à–∏–±–∫–∞*‚ùå\n–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è –¥–µ–±–∏–ª')
    else:
        bets[callback.from_user.id] = user_value + callback_data.bet_cng
        await update_bet_text(callback.message, user_value + callback_data.bet_cng)
    await callback.answer()


@dp.callback_query(BetCallbackData.filter(F.action == 'finish'))
async def callback_change_bet(callback: types.CallbackQuery, balance: list[int]):
    user_value = bets.get(callback.from_user.id, 0)
    if user_value == 0:
        await callback.message.answer('‚ùå*–û—à–∏–±–∫–∞*‚ùå\n–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–∞ –Ω—É–ª—é –¥–µ–±–∏–ª')
    elif user_value > balance[0]:
        await callback.message.answer('‚ùå*–û—à–∏–±–∫–∞*‚ùå\n–£ —Ç–µ–±—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –±–∞–±–æ–∫ –¥–µ–±–∏–ª')
        await callback.message.answer(f'üíé–ë–∞–ª–∞–Ω—Å: {balance[0]}üíé')
    else:
        await callback.message.delete()
        await callback.message.answer(f'üí∞–°—Ç–∞–≤–∫–∞: {user_value}üí∞')
        await callback.message.answer('–¢–µ–ø–µ—Ä—å, —è –∑–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6\n'
                                      '–ï—Å–ª–∏ —É–≥–∞–¥–∞–µ—à—å, –ø–æ–ª—É—á–∏—à—å ü§ë*x3 —Å—Ç–∞–≤–∫—É*ü§ë',
                                      reply_markup=get_keyboard_guess_number())

    await callback.answer()


@dp.callback_query(NumCallbackData.filter())
async def callback_guess_number(callback: types.CallbackQuery, callback_data: NumCallbackData, balance: list[int]):
    hid_num = random.Random().randint(1, 6)
    num = callback_data.num
    bet = bets[callback.from_user.id]
    if hid_num != num:
        balance[0] -= bet
        await callback.message.edit_text(f'~–£—Ä–∞~ üòì–û –Ω–æ, —Ç—ã —Å–ª–∏–ªüòì\n'
                                         f'üò°–ù—É –Ω–∏ —á–µ, –µ—â—ë –ø–æ–≤–µ–∑—ë—Çüò°\n'
                                         f'üíé–ë–∞–ª–∞–Ω—Å: {balance[0]}üíé')
    else:
        balance[0] += bet * 3
        await callback.message.edit_text(f'~–û –Ω–æ~ ü§ë–ï–ï–ï, –ø–ª—é—Å –±–∞–±–∫–∏ü§ë\n'
                                         f'üí∞–ò–∑–∏ {bet * 3} ~—Ñ–∞–Ω—Ç–∏–∫–æ–≤~ —Ä—É–±–∞—Å–æ–≤üí∞\n'
                                         f'ü§≠–©–∞—Å –Ω–∞ –±–∞–ª–∏–∫–µ \- {balance[0]}ü§≠')
    await callback.message.answer('–í—ã–±–∏—Ä–∞–π, –ø—É—Ç–Ω–∏–∫', reply_markup=get_keyboard_main_menu())
    await callback.answer()


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, balance=[1000], anims=anims, stickers=stickers)


if __name__ == "__main__":
    asyncio.run(main())
